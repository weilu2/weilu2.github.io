<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CentOS 7 设置防火墙开放指定端口]]></title>
    <url>%2F2018%2F10%2F30%2FCentOS-7-%E8%AE%BE%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%E5%BC%80%E6%94%BE%E6%8C%87%E5%AE%9A%E7%AB%AF%E5%8F%A3%2F</url>
    <content type="text"><![CDATA[摘要记录一下 Linux 常用的关于防火墙端口操作的命令。 查看已打开的端口1netstat -anp 查看想开的端口是否已开1firewall-cmd --query-port=666/tcp 若此提示 FirewallD is not running表示为不可知的防火墙 需要查看状态并开启防火墙 查看防火墙状态1systemctl status firewalld running 状态即防火墙已经开启dead 状态即防火墙未开启 开启防火墙1systemctl start firewalld 没有任何提示即开启成功 或者： 1service firewalld start 关闭防火墙1systemctl stop firewalld centos7.3 上述方式可能无法开启，可以先1systemctl unmask firewalld.service 然后 1systemctl start firewalld.service 查看想开的端口是否已开1firewall-cmd --query-port=666/tcp 提示no表示未开 开永久端口号1firewall-cmd --add-port=666/tcp --permanent 提示 success 表示成功 重新载入配置1firewall-cmd --reload 比如添加规则之后，需要执行此命令 #移除端口 1firewall-cmd --permanent --remove-port=666/tcp]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>firewall</tag>
        <tag>防火墙</tag>
        <tag>port</tag>
        <tag>端口</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7 网络配置之初始配置、静态IP以及网桥]]></title>
    <url>%2F2018%2F10%2F27%2FCentOS-7-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE%E4%B9%8B%E5%88%9D%E5%A7%8B%E9%85%8D%E7%BD%AE%E3%80%81%E9%9D%99%E6%80%81IP%E4%BB%A5%E5%8F%8A%E7%BD%91%E6%A1%A5%2F</url>
    <content type="text"><![CDATA[摘要记录一下 CentOS 7 的网络配置，一开始是安装完的初始化配置，动态分配IP；然后改成了静态IP；之后又修改为配置网桥。 初始配置123456789101112131415TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=dhcpDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp0s31f6UUID=98eb9b94-878c-4430-8ce5-13471bb46997DEVICE=enp0s31f6ONBOOT=no 静态IP12345678910111213141516171819202122TYPE=EthernetPROXY_METHOD=noneBROWSER_ONLY=noBOOTPROTO=staticDEFROUTE=yesIPV4_FAILURE_FATAL=noIPV6INIT=yesIPV6_AUTOCONF=yesIPV6_DEFROUTE=yesIPV6_FAILURE_FATAL=noIPV6_ADDR_GEN_MODE=stable-privacyNAME=enp0s31f6UUID=98eb9b94-878c-4430-8ce5-13471bb46997DEVICE=enp0s31f6ONBOOT=yesIPADDR=192.168.0.123GATEWAY=192.168.0.1NETMASK=255.255.255.0NM_CONTROLLED=noDNS1=8.8.8.8DNS2=8.8.4.4 网桥ifcfg-br0文件： 123456789TYPE=BridgeNAME=br0DEVICE=br0ONBOOT=yesBOOTPROTO=staticIPADDR=192.168.0.123GATEWAY=192.168.0.1NETMASK=255.255.255.0DNS1=192.168.0.1 ifcfg-enp0s31f6文件： 123456TYPE=EthernetBRIDGE=br0NAME=enp0s31f6UUID=99244a4d-8cac-4023-9a09-8e50c547cd3aDEVICE=enp0s31f6ONBOOT=yes]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Bridge</tag>
        <tag>Network</tag>
        <tag>Static IP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用MAT对Java程序进行内存分析之小试牛刀]]></title>
    <url>%2F2018%2F10%2F26%2F%E4%BD%BF%E7%94%A8MAT%E5%AF%B9Java%E7%A8%8B%E5%BA%8F%E8%BF%9B%E8%A1%8C%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B9%8B%E5%B0%8F%E8%AF%95%E7%89%9B%E5%88%80%2F</url>
    <content type="text"><![CDATA[摘要今天在写爬虫的时候发现数据抓到五十万左右时候，进程占用内存1.5G左右，程序完全卡死了。爬虫是用 WebMagic 框架写的，逻辑也不复杂，看不出什么问题；阅读了 WebMagic 的源码，看着也没有什么问题。就尝试通过内存分析的方式看看能否找出问题的原因。 启动程序，打开 %JAVA_HOME%/bin/jconsole.exe 工具，根据进程ID连接到运行中到Java程序 可以看到程序在执行过程中不断的占用内容，然后被GC回收内存。 程序初始化的时候读取了大概五十万条左右数据，所以一开始就占用了500M左右的内存，后续GC回收时，一般在500M左右徘徊 随着程序执行时间不断累积，可以看到内存占用越来越大了，GC回收后相对于初始化时，仍然有一百多M没有回收掉 运行了大概半个小时之后程序挂，在运行期间使用 jmap 工具保存了若干个时间节点下的内存快照。 12345678910111213C:\Java\jdk1.8.0_151\bin&gt;jmap -dump:format=b,file=D:/jvmdump/heap.bin 4344Dumping heap to D:\jvmdump\heap.bin ...Heap dump file createdC:\Java\jdk1.8.0_151\bin&gt;jmap -dump:format=b,file=D:/jvmdump/heap.bin 4344Dumping heap to D:\jvmdump\heap.bin ...File exists...C:\Java\jdk1.8.0_151\bin&gt;jmap -dump:format=b,file=D:/jvmdump/heap10.bin 4344Dumping heap to D:\jvmdump\heap10.bin ...Heap dump file created jmp 工具生成的是内存快照，因此每个文件的大小就是当前程序所使用内存的大小。 接下来使用 MAT（Memory Analyzer Tool）工具对内存进行分析。 MAT工具下载地址：http://www.eclipse.org/mat/downloads.php 对比查看不同时间段占用内存最大的对象情况。 通过这个对比分析，可以很明显看到内存占用最大的对象是数据库连接对象，结合我的程序，能够判断出来应该是使用的数据连接池有问题。更换一个连接池测试一下发现，确实是这个问题。这样，就未完成了一次简单的内存分析。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>MAT</tag>
        <tag>内存分析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无法启动此程序，因为计算机中丢失 api-ms-win-crt-runtime-l1-1-0.dll]]></title>
    <url>%2F2018%2F10%2F26%2F%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E6%AD%A4%E7%A8%8B%E5%BA%8F%EF%BC%8C%E5%9B%A0%E4%B8%BA%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E4%B8%A2%E5%A4%B1-api-ms-win-crt-runtime-l1-1-0-dll%2F</url>
    <content type="text"><![CDATA[摘要我这边碰到的错误是在安装 MySQL Workbench 时出现的，这个文件是 Visual C++ Redistributable 下的一个文件。我按照其官网上标注的安装前提，安装了 Visual C++ 2015 Redistributable for Visual Studio 2015，重新安装 Workbench 仍然报该错误。 问题描述 解析其主要原因是在安装 Visual C++ 2015 Redistributable for Visual Studio 2015 时，系统中已经存在了某个版本了，并且文件 api-ms-win-crt-runtime-l1-1-0.dll 可能正在被某个程序所引用，在重新安装时，并没有将之前的 api-ms-win-crt-runtime-l1-1-0.dll 文件更新覆盖，从而导致没有真正解决该问题。 解决方法解决方法就是先找到该文件，将其删除，删除的过程中涉及到某个程序引用这个文件的，先将那个程序退出再删除。 在目录 C:\Windows\System32和C:\Windows\SysWOW64 下查找 api-ms-win-crt-runtime-l1-1-0.dll 文件，如果有，就将其删除。 然后重新安装 Visual C++ 2015 Redistributable for Visual Studio 2015，安装之后可能要重启，之后再安装 Workbench 即可正常运行。 对应到在安装其他程序过程中碰到该问题的情况，只需要按照相同的方法，安装对应版本的 Visual C++ 即可。]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Visual C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL启动错误：在本地计算机上的MySQL57服务启动后停止。某些服务在未由其他服务或程序使用时将自动停止]]></title>
    <url>%2F2018%2F10%2F26%2FMySQL%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%EF%BC%9A%E5%9C%A8%E6%9C%AC%E5%9C%B0%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%8A%E7%9A%84MySQL57%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8%E5%90%8E%E5%81%9C%E6%AD%A2%E3%80%82%E6%9F%90%E4%BA%9B%E6%9C%8D%E5%8A%A1%E5%9C%A8%E6%9C%AA%E7%94%B1%E5%85%B6%E4%BB%96%E6%9C%8D%E5%8A%A1%E6%88%96%E7%A8%8B%E5%BA%8F%E4%BD%BF%E7%94%A8%E6%97%B6%E5%B0%86%E8%87%AA%E5%8A%A8%E5%81%9C%E6%AD%A2%2F</url>
    <content type="text"><![CDATA[摘要在 MySQL 服务启动时，出现错误“在本地计算机上的MySQL57服务启动后停止。某些服务在未由其他服务或程序使用时将自动停止”，服务无法正常启动。 问题描述这个问题是在MySQL服务停掉之后，重新启动时出现的，情形如下： 问题原因和解决方法一开始是有点蒙的，后来想到刚刚停掉服务时，是为了修改配置文件 my.ini 的： 我在配置文件中配置了服务器的字符集，实际上应该写作utf8，多了一个横杠之后就会报错，去掉后重启就正常了。 这个配置文件错误，是导致这个问题的一个原因。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>my.ini</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Configure Maven Java Project in Idea on CentOS 7]]></title>
    <url>%2F2018%2F10%2F20%2FConfigure-Maven-Java-Project-in-Idea-on-CentOS-7%2F</url>
    <content type="text"><![CDATA[摘要介绍如何在 CentOS 7 环境下安装配置 JDK、Maven、Idea。以及如何创建一个可以运行的 Maven Java 项目。 卸载 OpenJDK使用命令查看当前系统的 jdk 版本：1234[root@localhost ~]# java -versionopenjdk version &quot;1.8.0_161&quot;OpenJDK Runtime Environment (build 1.8.0_161-b14)OpenJDK 64-Bit Server VM (build 25.161-b14, mixed mode) 确实是 openjdk，然后使用 yum 命令查看有多少个包：12345678[root@localhost ~]# yum list installed | grep javajava-1.7.0-openjdk.x86_64 1:1.7.0.171-2.6.13.2.el7 @anacondajava-1.7.0-openjdk-headless.x86_64 1:1.7.0.171-2.6.13.2.el7 @anacondajava-1.8.0-openjdk.x86_64 1:1.8.0.161-2.b14.el7 @anacondajava-1.8.0-openjdk-headless.x86_64 1:1.8.0.161-2.b14.el7 @anacondajavapackages-tools.noarch 3.4.1-11.el7 @anacondapython-javapackages.noarch 3.4.1-11.el7 @anacondatzdata-java.noarch 2018c-1.el7 @anaconda 可以看到，系统中有两个版本的 openjdk，我们先删除 1.7 的：1234567[root@localhost ~]# yum -y remove java-1.7.0-openjdk*...删除: java-1.7.0-openjdk.x86_64 1:1.7.0.171-2.6.13.2.el7 java-1.7.0-openjdk-headless.x86_64 1:1.7.0.171-2.6.13.2.el7 完毕！ 用同样的方法将 1.8 的也删除即可。12yum -y remove java-1.8.0-openjdk*... 安装 JDK下载 JDKhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html 这里下载源码版本的。 将包移动到 /usr/local/ 目录下，并解压：1tar -xvzf jdk-8u181-linux-x64.tar.gz 配置环境变量打开配置文件：1vim /etc/profile 在文件最后添加如下内容：123export JAVA_HOME=/usr/local/jdk1.8.0_181export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin 效果如下： 保存后退出，然后重新加载配置文件：1source /etc/profile 测试1234[root@localhost local]# java -versionjava version &quot;1.8.0_181&quot;Java(TM) SE Runtime Environment (build 1.8.0_181-b13)Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode) 安装 Idea下载：https://www.jetbrains.com/idea/download/#section=linux得到文件：ideaIC-2018.2.4.tar.gz 将该文件拷贝到 /usr/local 目录下，然后解压：1tar -zxvf ideaIC-2018.2.4.tar.gz 进入该目录，其中有一个 Install-Linux-tar.txt 文件，其中说明了如何安装。 进入该文件夹的 bin 目录中，执行：1./idea.sh 第一次执行时，会生成一些配置文件，以及要求你进行一些设置。 安装 Maven下载：1wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz 将下载文件拷贝到 /usr/local/ 中然后解压：1tar -zxvf /usr/local/apache-maven-3.5.4-bin.tar.gz 创建 Java 项目在 IDEA 的顶部的菜单中 File -&gt; New -&gt; Project 打开如下界面，选择 Maven，设置好项目所使用的 SDK，勾选 Create from archetype，然后从下面选择一个 Maven 的QuickStart 项目模板。 填写项目的 Maven 相关信息： 这里注意，使用的 Maven Home 目录选择你所下载的 Maven 版本，同时将Maven的设置文件和仓库目录修改为你自定义的。 这里基本不用修改，如果需要可以更改项目名称和存放路径。 之后，项目的创建可能需要一些时间来下载和引入相关的模板文件。 完成之后，你会在信息框中看到 BUILD SUCCESS的字样，不过这个时候这个Java项目是没有办法直接运行的。需要点击右下角的方框中的 Enable Auto Import才行。 之后，项目就变成一个可执行的项目了，在 Main 函数所在的类中右击，会出现 Run &#39;App.main()&#39; 的选项。如果找不到这个右下角的小方块，那么在项目名称上右击，选择Maven -&gt; Reimport 可以达到相同的效果。]]></content>
      <categories>
        <category>Idea</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Maven</tag>
        <tag>Idea</tag>
        <tag>Run Main</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 KickStart 无人值守的全命令行 KVM 虚拟机安装过程]]></title>
    <url>%2F2018%2F10%2F14%2F%E5%9F%BA%E4%BA%8E-KickStart-%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E7%9A%84%E5%85%A8%E5%91%BD%E4%BB%A4%E8%A1%8C-KVM-%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[摘要考虑到服务器没有配置界面，而需要在服务器上配置一些虚拟机，可以使用基于 KickStart 无人值守的方式，基于命令行来安装配置和使用虚拟机。安装完成的虚拟机直接可以使用SSH在局域网内连接。 配置主机环境libvirt-client.x86_64 0:3.9.0-14.el7_5.8 Libvirt 的客户端，主要功能是在宿主机关机时通知虚拟机正常关机，防止强制关机导致数据丢失。 qemu-kvm.x86_64 10:1.5.3-156.el7_5.5KVM在用户控件运行的程序 virt-manager.noarch 0:1.4.3-3.el7基于 libvirt 的可视化虚拟机管理工具 libvirt.x86_64 0:3.9.0-14.el7_5.8用于管理虚拟机的APi virt-viewer.x86_64 0:5.0-10.el7显示虚拟机控制台的console virt-top.x86_64 0:1.0.8-24.el7 查看虚拟机的资源使用情况，类似于top命令 qemu-img-1.5.3-156.el7_5.5.x86_64 使用 HTTP 服务提供安装镜像1、安装 HTTP 服务通过运行下面命令安装 HTTP 服务：1yum install httpd 2、拷贝 ISO 镜像从网络下载或是从其他服务器将 CentOS 7 的二进制 DVD ISO 镜像拷贝到 HTTP 服务所在的主机上。这里拷贝到如下位置：1/home/packages/CentOS-7-x86_64-DVD-1804.iso 3、挂载镜像首先在 /mnt 目录下创建一个目录 /mnt/ctos7-install，这个目录名字随意。然后使用以下命令挂载镜像：1mount -o loop,ro -t iso9660 /home/packages/CentOS-7-x86_64-DVD-1804.iso /mnt/ctos7-install 4、拷贝安装包使用如下命令将安装镜像中的文件拷贝到 HTTP 服务的目录中：1cp -r /mnt/ctos7-install/ /var/www/html/ 拷贝完成之后，可以在 /var/www/html/ctos7-install 目录下看到以下内容：1234[root@weilu_125 ctos7-install]# lsCentOS_BuildTag GPL LiveOS RPM-GPG-KEY-CentOS-7EFI images Packages RPM-GPG-KEY-CentOS-Testing-7EULA isolinux repodata TRANS.TBL 这些内容就是镜像中的文件。 5、启动 HTTP 服务1systemctl start httpd.service 6、开放端口HTTP 服务默认使用的 80 端口一般防火墙是没有开放的，可以使用命令检查：1firewall-cmd --query-port=80/tcp 如果返回的是 no 则表示没有开启，使用如下命令开启：12345# 开启端口firewall-cmd --add-port=80/tcp --permanent# 重新载入配置firewall-cmd --reload 7、测试在浏览器中输入这台主机的 IP 地址加上路径：1http://192.168.0.125/ctos7-install/ 可以看到如下内容，说明HTTP服务配置成功。 编写 Kickstart 文件在 HTTP 服务目录下创建一个文件 /var/www/html/kickstart/ks.cfg，将如下内容填充到文件中：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586################################################################# Environment setup################################################################# url --url=&quot;http://192.168.0.125/kickstart/ks.cfg&quot;textcdromauth --enableshadow --passalgo=sha512keyboard --vckeymap=us --xlayouts=&apos;us&apos;lang en_US.UTF-8eula --agreedreboot################################################################# network configuration################################################################network --bootproto=static --ip=192.168.0.151 --gateway=192.168.0.1 --netmask=255.255.255.0 --noipv6 --device=eth0 --nameserver=192.168.0.1,8.8.8.8 --activatenetwork --hostname=weilu_151timezone Asia/Shanghai --isUtc################################################################# partitioning################################################################ignoredisk --only-use=vdabootloader --location=mbr --boot-drive=vdazerombrclearpart --none --initlabelautopart --type=lvm# part swap --asprimary --fstype=&quot;swap&quot; --size=1024# part /boot --fstype xfs --size=200# part pv.01 --size=1 --grow# volgroup rootvg01 pv.01# logvol / --fstype xfs --name=lv01 --vgname=rootvg01 --size=1 --grow############################################################################################ # User Accounts# Generate encrypted password: python -c &apos;import crypt; print(crypt.crypt(&quot;My Password&quot;))&apos;# Or openssl passwd -1 password############################################################################################rootpw king # user --groups=wheel --name=josepy --password=password --gecos=&quot;Mutai Josphat&quot;################################################################# SELinux and Firewalld#################################################################selinux --enforcing#selinux --permissiveselinux --disabled firewall --enabled --http --ssh --ftp --port=https:tcp --port=ipp:tcp# firewall --disabled ################################################################# Software Packages################################################################%packages --nobase --ignoremissing@core@basevim bash-completion%end 根据实际情况修改文件中的以下内容：键盘和语言设置12keyboard --vckeymap=us --xlayouts=&apos;us&apos;lang en_US.UTF-8 网络配置这里配置的是使用网桥连接，固定IP：1network --bootproto=static --ip=192.168.0.151 --gateway=192.168.0.1 --netmask=255.255.255.0 --noipv6 --device=eth0 --nameserver=192.168.0.1,8.8.8.8 --activate 主机名1network --hostname=weilu_151 时区1timezone Asia/Shanghai --isUtc 这里可以使用命令 timedatectl list-timezones 查看所有时区的列表。 root密码1rootpw king 在 rootpw 指令后面跟的就是root账号的密码。 创建虚拟机使用如下命令创建虚拟机，之后整个过程会自动进行，不需要交互操作：123456789101112virt-install \ --name centos7-3 \ --memory 2048 \ --vcpus 2 \ --disk path=/home/kvm3/centos7.0.qcow2,size=50 \ --location http://192.168.0.125/ctos7-install/ \ --os-variant centos7.0 \ --network bridge:br0 \ --graphics=none \ --console pty,target_type=serial \ -x &apos;console=ttyS0,115200n8 serial&apos; \ -x &quot;ks=http://192.168.0.125/kickstart/ks.cfg&quot; 执行该命令后，会自动安装配置虚拟机： 安装完成之后，命令行会自动连接登录到虚拟机中，输入用户名密码即可登录虚拟机。 管理虚拟机以命令行启动虚拟机以命令行启动虚拟机，并将该命令行连接到虚拟机中的命令行：1virsh start centos7-3 --console 如果期间出现以下错误：Active console session exists for this domain完整信息：12345[root@weilu_125 Pictures]# virsh start centos7-3 --consoleDomain centos7-3 startedConnected to domain centos7-3Escape character is ^]error: operation failed: Active console session exists for this domain 只需要重启虚拟机守护进程即可：1systemctl restart libvirtd.service 连接虚拟机对于已经启动的虚拟机，可以使用以下命令以命令行的方式连接虚拟机：1virsh console centos7-3 问题下面罗列一些在这个过程中可能碰到的问题。 WARNING KVM acceleration not available, using ‘qemu’这个问题的直观表现就是执行 virt-install 命令之后就卡住了，如下： 12345678910111213141516171819[root@weilu_123 centos7-1]# virt-install \&gt; --name centos7-1 \&gt; --memory 2048 \&gt; --vcpus 2 \&gt; --disk path=/home/kvms/centos7-1/centos7.0.qcow2,size=200 \&gt; --location http://192.168.0.123/ctos7-install/ \&gt; --os-variant centos7.0 \&gt; --network bridge:br0 \&gt; --graphics=none \&gt; --console pty,target_type=serial \&gt; -x &apos;console=ttyS0,115200n8 serial&apos; \&gt; -x &quot;ks=http://192.168.0.123/kickstart/ks.cfg&quot;开始安装......搜索文件 vmlinuz...... | 5.9 MB 00:00 搜索文件 initrd.img...... | 50 MB 00:00 正在分配 &apos;centos7.0.qcow2&apos; | 200 GB 00:00 连接到域 centos7-1换码符为 ^] 这个问题是BIOS的CPU虚拟化功能没有开启导致的。 只要进入 BIOS，将Intel Virtualization Technology开启即可，下面例子是华硕主板： 参考[1] RHEL and CentOS Kickstart on KVM Automated Installation With virt-install[2] CentOS 7 INSTALLING IN TEXT MODE[3] Use VNC mode to install CentOS 7[4] Kickstart Installation]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>KVM</tag>
        <tag>KickStart</tag>
        <tag>无人值守</tag>
        <tag>命令行安装虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DIY饭团的烘干机——全环绕立体暖风]]></title>
    <url>%2F2018%2F10%2F10%2FDIY%E9%A5%AD%E5%9B%A2%E7%9A%84%E7%83%98%E5%B9%B2%E6%9C%BA%E2%80%94%E2%80%94%E5%85%A8%E7%8E%AF%E7%BB%95%E7%AB%8B%E4%BD%93%E6%9A%96%E9%A3%8E%2F</url>
    <content type="text"><![CDATA[摘要日常给饭团洗澡后，吹干饭团的毛发实在是一个痛苦的过程，一个小吹风机两三个小时，实在伤不起，本打算买个烘干箱，但价格勉强可以接受的，箱子实在看不上，看得上的，价格实在是不美丽，因此打算自己DIY一个，先做个设计和预算再说。 饭团镇楼 设计草图整体草图 正面 左侧 右侧 背部 底部]]></content>
      <categories>
        <category>饭团的小日子</category>
      </categories>
      <tags>
        <tag>烘干机</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CentOS 7.4 配置SSH免密登录]]></title>
    <url>%2F2018%2F10%2F08%2FCentOS-7-4-%E9%85%8D%E7%BD%AESSH%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[摘要目前局域网中参与配置的有三台机器，要配置这三台机器免密登录。 配置主机名配置主机名其实相当于在这三台机器上各自备份一个路由表，由IP到主机名之间的映射。下面以 177.11.12.115 为例，修改主机名：1vi /etc/hostname 将其中的内容修改为：1oolong116 然后增加映射：1vi /etc/hosts 在文件末尾添加以下内容：123177.11.12.113 oolong113177.11.12.115 oolong115177.11.12.115 oolong116 别忘了重启一下电脑，不然hostname不会生效1reboot 测试：12345[root@localhost local]# ping oolong115PING oolong115 (177.11.12.115) 56(84) bytes of data.64 bytes from oolong115 (177.11.12.115): icmp_seq=1 ttl=64 time=0.230 ms64 bytes from oolong115 (177.11.12.115): icmp_seq=2 ttl=64 time=0.121 ms64 bytes from oolong115 (177.11.12.115): icmp_seq=3 ttl=64 time=0.115 ms 这时，我们已经可以使用主机名 oolong115 来代替IP 177.11.12.115。同样的方法对另外两台机器设置，这样三台机器之间就可以通过主机名互相访问了。 生成密钥使用命令 ssh-keygen 生成密钥，在生成过程中会要求输入存放目录等内容，可以不输入，回车即可。12345678910111213141516171819202122[root@oolong113 ~]# ssh-keygenGenerating public/private rsa key pair.Enter file in which to save the key (/root/.ssh/id_rsa): Created directory &apos;/root/.ssh&apos;.Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa.Your public key has been saved in /root/.ssh/id_rsa.pub.The key fingerprint is:SHA256:jpatt7hZb3V2sLjWm6Wvz3cLo2uFaOPGVpFCMBBsrvE root@oolong113The key&apos;s randomart image is:+---[RSA 2048]----+| .ooo. || o .. || o . . || . . . o . || + S o o. o || . E = + oo.+ .|| + B o..B ..|| . =.*..+ +=o|| =o+oo+. =*B|+----[SHA256]-----+ 进入目录 /root/.ssh/ 可以看到生成以下的两个文件：12-rw-------. 1 root root 1679 Sep 12 19:37 id_rsa-rw-r--r--. 1 root root 397 Sep 12 19:37 id_rsa.pub 如法炮制，给另外两台机器也生成密钥。 拷贝秘钥这里需要注意，要使用SSH的命令来拷贝秘钥，因为里面不能有其他字符，如果是通过文件编辑工具打开拷贝，可能会产生多余的换行符等内容，可能产生的问题是A能免密登录B，但B不能免密登录A。比如当前在 oolong116 这台机器上，进入 /root/.ssh/ 目录，执行下面命令，将秘钥拷贝到 113 上：1ssh-copy-id -i id_rsa.pub root@oolong113 拷贝后检查 113 的 /root/.ssh 目录下有没有 authorized_keys 文件。 依次的拷贝到其他机器上，同样的将其他机器上的秘钥要拷贝到176 上 测试123[root@oolong116 .ssh]# ssh oolong115Last login: Thu Sep 13 05:32:43 2018 from 177.11.12.115[root@oolong115 ~]# 此时，就登录上了 115 了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>SSH</tag>
        <tag>免密登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Config virtual network connection with bridge mode]]></title>
    <url>%2F2018%2F10%2F06%2FConfig-virtual-network-connection-with-bridge-mode%2F</url>
    <content type="text"><![CDATA[摘要在宿主机为 CentOS 7 的环境中通过KVM配置CentOS 7 虚拟机，使用 Bridge 模式配置网络连接，使虚拟机与宿主机处于同一网络环境中。 Create BrdigeInstall ModuleCentOS 7 在系统启动时默认加载了桥接模块。使用下面的命令可以判断这个模块是否加载。1234567891011121314[root@weilu_125 kvms]# modinfo bridgefilename: /lib/modules/3.10.0-862.el7.x86_64/kernel/net/bridge/bridge.ko.xzalias: rtnl-link-bridgeversion: 2.3license: GPLretpoline: Yrhelversion: 7.5srcversion: A0B6183F98024E85CD123C5depends: stp,llcintree: Yvermagic: 3.10.0-862.el7.x86_64 SMP mod_unload modversions signer: CentOS Linux kernel signing keysig_key: 3A:F3:CE:8A:74:69:6E:F1:BD:0F:37:E5:52:62:7B:71:09:E3:2B:96sig_hashalgo: sha256 如果这个模块没有加载，可以使用下面的命令进行加载。1modprobe --first-time bridge 安装桥接工具：1yum install bridge-utils -y create a network bridge要创建一个网桥，可以在 /etc/sysconfig/network-scripts/ 目录下创建一个名为 ifcfg-brN 的文件，将其中的 N 替换为数字，比如“0”。1vi /etc/sysconfig/network-scripts/ifcfg-br0 将下面的内容放置到这个文件中，对应你的主机环境修改相应配置：123456789TYPE=BridgeNAME=br0DEVICE=br0ONBOOT=yesBOOTPROTO=staticIPADDR=192.168.0.125GATEWAY=192.168.0.1NETMASK=255.255.255.0DNS1=192.168.0.1 创建完网桥之后，需要将网络配置接口挂载到这个网桥上。比如，我这边使用的本机已有的适配器 eno1： 1vi /etc/sysconfig/network-scripts/ifcfg-eno1 将以下内容放置到该配置文件中：123456TYPE=EthernetBRIDGE=br0NAME=eno1UUID=99244a4d-8cac-4023-9a09-8e50c547cd3aDEVICE=eno1ONBOOT=yes 使用如下命令重启网络服务：1systemctl restart network 查看网络配置：1234567891011121314151617181920212223242526[root@weilu_125 network-scripts]# ifconfigbr0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.0.125 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 fe80::329c:23ff:fee1:f0d9 prefixlen 64 scopeid 0x20&lt;link&gt; ether 30:9c:23:e1:f0:d9 txqueuelen 1000 (Ethernet) RX packets 3503 bytes 599352 (585.3 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 1932 bytes 1004140 (980.6 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 ether 30:9c:23:e1:f0:d9 txqueuelen 1000 (Ethernet) RX packets 510891 bytes 330776497 (315.4 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 285983 bytes 46787578 (44.6 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device interrupt 16 memory 0xa1100000-a1120000 lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 13058 bytes 1819263 (1.7 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 13058 bytes 1819263 (1.7 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Config Guest Connection在虚拟机的设置中，将 Network source 设置为通过刚刚设置的网桥进行连接。 然后修改虚拟机的网络配置：123456789TYPE=EthernetONBOOT=yesDEVICE=eth0BOOTPROTO=staticIPADDR=192.168.0.161NETMASK=255.255.255.0BROADCAST=192.168.0.255GATEWAY=192.168.0.1DNS1=192.168.0.1 使用如下命令重启网络服务：1systemctl restart network 查看网络配置：123456789101112131415161718[root@localhost ~]# ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 192.168.0.161 netmask 255.255.255.0 broadcast 192.168.0.255 inet6 fe80::5054:ff:fe24:c503 prefixlen 64 scopeid 0x20&lt;link&gt; ether 52:54:00:24:c5:03 txqueuelen 1000 (Ethernet) RX packets 212 bytes 183776 (179.4 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 186 bytes 18719 (18.2 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10&lt;host&gt; loop txqueuelen 1000 (Local Loopback) RX packets 68 bytes 5912 (5.7 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 68 bytes 5912 (5.7 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 testFrom Host123456789[root@weilu_125 network-scripts]# ping 192.168.0.161 -c 3PING 192.168.0.161 (192.168.0.161) 56(84) bytes of data.64 bytes from 192.168.0.161: icmp_seq=1 ttl=64 time=0.386 ms64 bytes from 192.168.0.161: icmp_seq=2 ttl=64 time=0.327 ms64 bytes from 192.168.0.161: icmp_seq=3 ttl=64 time=0.320 ms--- 192.168.0.161 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 2000msrtt min/avg/max/mdev = 0.320/0.344/0.386/0.033 ms From Guest123456789[root@localhost ~]# ping 192.168.0.125 -c 3PING 192.168.0.125 (192.168.0.125) 56(84) bytes of data.64 bytes from 192.168.0.125: icmp_seq=1 ttl=64 time=0.101 ms64 bytes from 192.168.0.125: icmp_seq=2 ttl=64 time=0.260 ms64 bytes from 192.168.0.125: icmp_seq=3 ttl=64 time=0.252 ms--- 192.168.0.125 ping statistics ---3 packets transmitted, 3 received, 0% packet loss, time 1999msrtt min/avg/max/mdev = 0.101/0.204/0.260/0.074 ms]]></content>
      <categories>
        <category>KVM</category>
      </categories>
      <tags>
        <tag>Bridge</tag>
        <tag>KVM</tag>
        <tag>Network Connection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker容器基于OVS跨主机网络连接]]></title>
    <url>%2F2018%2F10%2F04%2FDocker%E5%AE%B9%E5%99%A8%E5%9F%BA%E4%BA%8EOVS%E8%B7%A8%E4%B8%BB%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[摘要利用OVS技术将位于不同物理主机中的docker容器的网络连通，使之能够相互访问。 前置条件关闭 SELINUX在配置文件中：1vi /etc/selinux/config 将其中的内容 SELINUX=enforcing 修改：1SELINUX=disabled 然后重启 安装 open-vswitch参考【安装配置 Open-vSwitch-2.5.5】 启动 open-vSiwtch：1ovs-ctl start 配置 Docker 网桥IP修改守护进程的配置文件：1vi /etc/docker/daemon.json 在其中添加网桥的IP设置：1&quot;bip&quot;: &quot;172.17.1.1/24&quot; 重启docker：12systemctl stop dockersystemctl start docker 查看网桥IP：1234567891011[root@localhost ~]# ifconfigdocker0: flags=4099&lt;UP,BROADCAST,MULTICAST&gt; mtu 1500 inet 172.17.1.1 netmask 255.255.255.0 broadcast 172.17.1.255 ether 02:42:c7:7b:7d:28 txqueuelen 0 (Ethernet) RX packets 0 bytes 0 (0.0 B) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 0 bytes 0 (0.0 B) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0eno1: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500... 确实变成了我们所设定的IP。 配置 Open-vSwitch创建网桥1ovs-vsctl add-br br0 查看网桥12[root@localhost docker-data]# ovs-vsctl list-brbr0 创建端口1ovs-vsctl add-port br0 gre0 -- set interface gre0 type=gre options:remote_ip=192.168.0.125 查看端口12[root@localhost ~]# ovs-vsctl list-ports br0gre0 查看详细配置信息1234567891011[root@localhost docker-data]# ovs-vsctl show 840c2123-021b-4137-b1d5-8b0963c9e6ac Bridge &quot;br0&quot; Port &quot;gre0&quot; Interface &quot;gre0&quot; type: gre options: &#123;remote_ip=&quot;192.168.0.125&quot;&#125; Port &quot;br0&quot; Interface &quot;br0&quot; type: internal ovs_version: &quot;2.5.5&quot; 连接 br0 和 docker0查看往前目前的连接情况：1234[root@localhost docker-data]# brctl showbridge name bridge id STP enabled interfacesdocker0 8000.024205ee36a6 novirbr0 8000.525400249fb4 yes virbr0-nic 可以注意到，此时的 docker0 是没有接口连接的，我们将其与 br0 连接起来：1brctl addif docker0 br0 此时再查看时，会发现其与接口br0连接了：1234[root@localhost ~]# brctl showbridge name bridge id STP enabled interfacesdocker0 8000.0242c77b7d28 no br0virbr0 8000.52540071bdcb yes virbr0-nic 挂载 docker0 和 br0查看这两个网络连接的状态：1234567891011[root@localhost ~]# ip link show...2: eno1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000 link/ether 30:9c:23:e1:f0:d9 brd ff:ff:ff:ff:ff:ff...6: br0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop master docker0 state DOWN mode DEFAULT group default qlen 1000 link/ether a2:37:3f:c1:46:4e brd ff:ff:ff:ff:ff:ff...10: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default link/ether 02:42:c7:7b:7d:28 brd ff:ff:ff:ff:ff:ff... 其中还有很多个其他连接的情况，这里省略不看，主要关注 br0 和 docker0，留着 eno1 主要是为了对比。eno1 是本机物理网卡的连接，可以看到其状态 state UP，我们接下来要将 br0 和 docker0 也修改为 UP。1ip link set dev br0 up 在将 br0 改为 UP 时，docker0 状态改为 up，而br0 为 UNKNOW：123456: br0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UNKNOWN mode DEFAULT group default qlen 1000 link/ether a2:37:3f:c1:46:4e brd ff:ff:ff:ff:ff:ff 10: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP mode DEFAULT group default link/ether 02:42:c7:7b:7d:28 brd ff:ff:ff:ff:ff:ff 添加路由查看当前路由规则：12345[root@localhost ~]# ip route listdefault via 192.168.0.1 dev eno1 proto static metric 100 172.17.1.0/24 dev docker0 proto kernel scope link src 172.17.1.2 192.168.0.0/24 dev eno1 proto kernel scope link src 192.168.0.125 metric 100 192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 添加路由：12ip route add 172.17.0.0/16 dev docker0route add -net 172.17.0.0/16 gw 192.168.0.125 检查确认：12345678[root@localhost ~]# ip route listdefault via 192.168.0.1 dev enp0s31f6 169.254.0.0/16 dev enp0s31f6 scope link metric 1002 172.17.0.0/16 via 192.168.0.125 dev enp0s31f6 172.17.0.0/16 dev docker0 scope link 172.17.1.0/24 dev docker0 proto kernel scope link src 172.17.1.1 192.168.0.0/24 dev enp0s31f6 proto kernel scope link src 192.168.0.123 192.168.122.0/24 dev virbr0 proto kernel scope link src 192.168.122.1 网络结构]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>网络连接</tag>
        <tag>跨主机</tag>
        <tag>open-vswitch</tag>
        <tag>桥接</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[加载nbd模块失败 modprobe nbd Module nbd not found]]></title>
    <url>%2F2018%2F09%2F30%2F%E5%8A%A0%E8%BD%BDnbd%E6%A8%A1%E5%9D%97%E5%A4%B1%E8%B4%A5-modprobe-nbd-Module-nbd-not-found%2F</url>
    <content type="text"><![CDATA[摘要解决加载 nbd 模块时报错的问题，modprobe nbd Module nbd not found。 前置安装 elfutils-libelf-devel这个模块后面在编译内核时会使用。先给装上。1yum install elfutils-libelf-devel 下载查看操作系统版本和内核版本12345[root@weilu_125 vctos7-1]# cat /etc/redhat-releaseCentOS Linux release 7.5.1804 (Core) [root@weilu_125 vctos7-1]# uname -r3.10.0-862.el7.x86_64 查看 kernel-devel 和 kernel-headers 包，实际上已经安装了：1234567[root@weilu_125 vctos7-1]# yum list installed | grep kernelabrt-addon-kerneloops.x86_64 2.1.11-50.el7.centos @anacondakernel.x86_64 3.10.0-862.el7 @anacondakernel-devel.x86_64 3.10.0-862.el7 @anacondakernel-headers.x86_64 3.10.0-862.el7 @anacondakernel-tools.x86_64 3.10.0-862.el7 @anacondakernel-tools-libs.x86_64 3.10.0-862.el7 @anaconda 根据操作系统和内核版本找到对应的源码，下载：1wget http://vault.centos.org/7.5.1804/os/Source/SPackages/kernel-3.10.0-862.el7.src.rpm 使用命令安装这个包：1rpm -ihv kernel-3.10.0-862.el7.src.rpm 这个包安装后，默认会在 /root/rpmbuild 目录下，同时还会在 /usr/src/kernel 下面生成一个目录，后面会用到。 解压其中的一个包：1tar Jxvf /root/rpmbuild/SOURCES/linux-3.10.0-862.el7.tar.xz -C /usr/src/kernels/ 完成上述步骤之后，可以看到如下两个文件夹：12[root@weilu_125 kernels]# ls3.10.0-862.el7.x86_64 linux-3.10.0-862.el7 备份内核这里首先将内核移动到后缀增加了“-old”的目录下，然后将我们刚刚解压出来的内核目录拷贝过去，并进入内核目录1234[root@weilu_125 kernels]# mv $(uname -r) $(uname -r)-old[root@weilu_125 kernels]# mv linux-3.10.0-862.el7 $(uname -r)[root@weilu_125 kernels]# cd $(uname -r)[root@weilu_125 3.10.0-862.el7.x86_64]# 然后在这个目录下依次执行以下命令：123456make mrpropercp ../$(uname -r)-old/Module.symvers ./cp /boot/config-$(uname -r) ./.configmake oldconfigmake preparemake scripts 执行到这里暂停一下，修改文件:1/usr/src/kernels/3.10.0-862.el7.x86_64/drivers/block/nbd.c 修改如下配置：12// sreq.cmd_type = REQ_TYPE_SPECIAL;sreq.cmd_type = 7; 将这个变量之间设置为7即可，然后继续执行以下命令123make CONFIG_BLK_DEV_NBD=m M=drivers/blockcp drivers/block/nbd.ko /lib/modules/$(uname -r)/kernel/drivers/block/depmod -a 测试12345678910111213[root@weilu_125 block]# modinfo nbdfilename: /lib/modules/3.10.0-862.el7.x86_64/kernel/drivers/block/nbd.kolicense: GPLdescription: Network Block Deviceretpoline: Yrhelversion: 7.5srcversion: EDE909A294AC5FE08E81957depends: vermagic: 3.10.0 SMP mod_unload modversions parm: nbds_max:number of network block devices to initialize (default: 16) (int)parm: max_part:number of partitions per device (default: 0) (int)parm: debugflags:flags for controlling debug output (int)[root@weilu_125 block]#]]></content>
      <categories>
        <category>kernel</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nbd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于Github结合Hexo搭建个人博客]]></title>
    <url>%2F2018%2F09%2F29%2F%E5%9F%BA%E4%BA%8EGithub%E7%BB%93%E5%90%88Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[摘要本文介绍如何使用Hexo构建自己的个人博客，同时利用 GitHub 的仓库将内容发布到公网上。 部署与配置GitHub配置申请GitHub账号，并且创建名为 weilu2.github.io 的仓库。 安装 NodeJs安装 Git从官网下载安装 git. 配置免密提交打开 Git Bash，进入用于存放博客的根目录，比如 d:\blog：1234weilu@weilu-PC MINGW64 ~$ cd /d/Blog/weilu@weilu-PC MINGW64 /d/Blog 配置 Git 用户名和邮箱12345weilu@weilu-PC MINGW64 /d/Bloggit config --global user.name &quot;weilu2&quot;weilu@weilu-PC MINGW64 /d/Bloggit config --global user.email &quot;weilu0324@163.com&quot; 生成密钥1$ ssh-keygen -t rsa -C &quot;weilu0324@163.com&quot; 生成的密钥存储路径一般在 C:\Users\weilu\.ssh 使用 ssh-agent 管理私钥启动 ssh-agent123weilu@weilu-PC MINGW64 ~/.ssh$ eval &quot;$(ssh-agent -s)&quot;Agent pid 11508 将生成的密钥添加到 ssh-agent123weilu@weilu-PC MINGW64 ~/.ssh$ ssh-add id_rsaIdentity added: id_rsa (id_rsa) 将公钥添加到GitHub中在 GitHub 个人的设置中，添加 SSH-KEY。 验证123$ ssh -T git@github.com...Hi weilu2! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 配置 Hexo安装使用命令12345678C:\Users\weilu&gt;npm install -g hexo-cliC:\Users\weilu\AppData\Roaming\npm\hexo -&gt; C:\Users\weilu\AppData\Roaming\npm\node_modules\hexo-cli\bin\hexonpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\hexo-cli\node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-cli@1.1.0added 225 packages from 414 contributors in 31.47s 创建博客在D盘创建一个目录 D:\Blog，进入该目录，使用如下命令初始化博客：12345678910111213141516171819202122232425262728293031323334D:\Blog&gt;hexo initINFO Cloning hexo-starter to D:\BlogCloning into &apos;D:\Blog&apos;...remote: Enumerating objects: 1, done.remote: Counting objects: 100% (1/1), done.remote: Total 68 (delta 0), reused 0 (delta 0), pack-reused 67Unpacking objects: 100% (68/68), done.Submodule &apos;themes/landscape&apos; (https://github.com/hexojs/hexo-theme-landscape.git) registered for path &apos;themes/landscape&apos;Cloning into &apos;D:/Blog/themes/landscape&apos;...remote: Enumerating objects: 6, done.remote: Counting objects: 100% (6/6), done.remote: Compressing objects: 100% (6/6), done.remote: Total 838 (delta 1), reused 3 (delta 0), pack-reused 832Receiving objects: 100% (838/838), 2.55 MiB | 25.00 KiB/s, done.Resolving deltas: 100% (441/441), done.Submodule path &apos;themes/landscape&apos;: checked out &apos;73a23c51f8487cfcd7c6deec96ccc7543960d350&apos;INFO Install dependenciesnpm WARN deprecated titlecase@1.1.2: no longer maintainednpm WARN deprecated postinstall-build@5.0.3: postinstall-build&apos;s behavior is now built into npm! You should migrate offof postinstall-build and use the new `prepare` lifecycle script with npm 5.0.0 or greater.&gt; nunjucks@3.1.3 postinstall D:\Blog\node_modules\nunjucks&gt; node postinstall-build.js srcnpm notice created a lockfile as package-lock.json. You should commit this file.npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)added 420 packages from 484 contributors and audited 4704 packages in 15.704sfound 0 vulnerabilitiesINFO Start blogging with Hexo! 初始化的过程是从 hexo 仓库下载博客的目录结构和文件，根据网速，需要一定时间。 安装依赖模块：1234567D:\Blog&gt;npm installnpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)audited 4704 packages in 2.15sfound 0 vulnerabilities 生成静态页面1234567891011121314151617181920212223242526272829303132D:\Blog&gt;hexo gINFO Start processingINFO Files loaded in 112 msINFO Generated: index.htmlINFO Generated: archives/index.htmlINFO Generated: archives/2018/09/index.htmlINFO Generated: fancybox/blank.gifINFO Generated: fancybox/jquery.fancybox.cssINFO Generated: fancybox/fancybox_loading@2x.gifINFO Generated: archives/2018/index.htmlINFO Generated: fancybox/fancybox_sprite.pngINFO Generated: fancybox/fancybox_sprite@2x.pngINFO Generated: fancybox/fancybox_loading.gifINFO Generated: fancybox/fancybox_overlay.pngINFO Generated: fancybox/helpers/fancybox_buttons.pngINFO Generated: js/script.jsINFO Generated: fancybox/jquery.fancybox.pack.jsINFO Generated: css/fonts/FontAwesome.otfINFO Generated: css/fonts/fontawesome-webfont.eotINFO Generated: fancybox/helpers/jquery.fancybox-buttons.jsINFO Generated: css/fonts/fontawesome-webfont.woffINFO Generated: css/style.cssINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.cssINFO Generated: fancybox/helpers/jquery.fancybox-thumbs.jsINFO Generated: fancybox/helpers/jquery.fancybox-buttons.cssINFO Generated: fancybox/helpers/jquery.fancybox-media.jsINFO Generated: css/fonts/fontawesome-webfont.ttfINFO Generated: 2018/09/28/hello-world/index.htmlINFO Generated: css/fonts/fontawesome-webfont.svgINFO Generated: css/images/banner.jpgINFO Generated: fancybox/jquery.fancybox.jsINFO 28 files generated in 288 ms 启动服务器123D:\Blog&gt;hexo sINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 能够正常启动服务器，并在浏览器中访问，说明 Hexo 配置成功，接下来要做的事情就是讲生成的静态页面提交到 Github上即可。 提交 Hexo 到 GitHub修改 _config.yml 文件，在最后增加如下内容：1234deploy: type: git repository: git@github.com:weilu2/weilu2.github.io.git branch: master 安装 Hexo 插件：12345678910D:\Blog&gt;npm install hexo-deployer-git --savenpm WARN deprecated swig@1.4.2: This package is no longer maintainednpm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.4 (node_modules\fsevents):npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.4: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)+ hexo-deployer-git@0.3.1added 31 packages from 36 contributors and audited 5874 packages in 7.482sfound 1 low severity vulnerability run `npm audit fix` to fix them, or `npm audit` for details 再次运行生成命令，就会自动生成静态文件，并部署到 git上了：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778D:\Blog&gt; hexo d -gINFO Start processingINFO Files loaded in 62 msINFO 0 files generated in 78 msINFO Deploying: gitINFO Setting up Git deployment...Initialized empty Git repository in D:/Blog/.deploy_git/.git/[master (root-commit) 67b0210] First commit 1 file changed, 0 insertions(+), 0 deletions(-) create mode 100644 placeholderINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...warning: LF will be replaced by CRLF in 2018/09/28/hello-world/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/2018/09/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/2018/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in archives/index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in css/style.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-buttons.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-media.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/helpers/jquery.fancybox-thumbs.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/jquery.fancybox.css.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/jquery.fancybox.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in fancybox/jquery.fancybox.pack.js.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in index.html.The file will have its original line endings in your working directorywarning: LF will be replaced by CRLF in js/script.js.The file will have its original line endings in your working directory[master 9321f7e] Site updated: 2018-09-29 00:08:21 29 files changed, 5777 insertions(+) create mode 100644 2018/09/28/hello-world/index.html create mode 100644 archives/2018/09/index.html create mode 100644 archives/2018/index.html create mode 100644 archives/index.html create mode 100644 css/fonts/FontAwesome.otf create mode 100644 css/fonts/fontawesome-webfont.eot create mode 100644 css/fonts/fontawesome-webfont.svg create mode 100644 css/fonts/fontawesome-webfont.ttf create mode 100644 css/fonts/fontawesome-webfont.woff create mode 100644 css/images/banner.jpg create mode 100644 css/style.css create mode 100644 fancybox/blank.gif create mode 100644 fancybox/fancybox_loading.gif create mode 100644 fancybox/fancybox_loading@2x.gif create mode 100644 fancybox/fancybox_overlay.png create mode 100644 fancybox/fancybox_sprite.png create mode 100644 fancybox/fancybox_sprite@2x.png create mode 100644 fancybox/helpers/fancybox_buttons.png create mode 100644 fancybox/helpers/jquery.fancybox-buttons.css create mode 100644 fancybox/helpers/jquery.fancybox-buttons.js create mode 100644 fancybox/helpers/jquery.fancybox-media.js create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.css create mode 100644 fancybox/helpers/jquery.fancybox-thumbs.js create mode 100644 fancybox/jquery.fancybox.css create mode 100644 fancybox/jquery.fancybox.js create mode 100644 fancybox/jquery.fancybox.pack.js create mode 100644 index.html create mode 100644 js/script.js delete mode 100644 placeholderBranch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:weilu2/weilu2.github.io.git&apos;.To github.com:weilu2/weilu2.github.io.git + c049402...9321f7e HEAD -&gt; master (forced update)INFO Deploy done: git 直接访问 写作创建分类页面12D:\Blog&gt;hexo new page categoriesINFO Created: D:\Blog\source\categories\index.md 编辑这个页面，增加 type ：12345---title: categoriesdate: 2018-09-29 09:10:18type: "categories"--- 修改主题下的 _config.yml 文件，在 menu 中增加分类导航：12345menu: Home: / categories: /categories Archives: /archivesrss: /atom.xml 创建标签页面12D:\Blog&gt;hexo new page tagsINFO Created: D:\Blog\source\tags\index.md 编辑页面，增加类型：12345---title: tagsdate: 2018-09-29 10:12:20type: &quot;tags&quot;--- 在主题的配置文件中，增加标签的链接：123456menu: Home: / categories: /categories tags: /tags Archives: /archivesrss: /atom.xml 创建内容页面12D:\Blog&gt;hexo new post &quot;基于Github结合Hexo搭建个人博客&quot;INFO Created: D:\Blog\source\_posts\2018-09-29-基于Github结合Hexo搭建个人博客.md]]></content>
      <categories>
        <category>乱七八糟</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
</search>
